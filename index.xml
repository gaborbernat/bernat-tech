<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tech articles by Bernát Gábor</title><link>https://bernat.tech/</link><description>Recent content on Tech articles by Bernát Gábor</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 16 May 2020 14:15:00 +0000</lastBuildDate><atom:link href="https://bernat.tech/index.xml" rel="self" type="application/rss+xml"/><item><title>Version numbers: how to use them?</title><link>https://bernat.tech/posts/version-numbers/</link><pubDate>Sat, 16 May 2020 14:15:00 +0000</pubDate><guid>https://bernat.tech/posts/version-numbers/</guid><description>The DRY principle (an acronym for don&amp;rsquo;t repeat yourself) encourages software engineers to abstract code into a separate component and reuse it rather than write it over and over again. If this happens across the system, the best practice is to put it inside a package that lives on its own (a library) and then pull it in from the applications when required.
As most of us can&amp;rsquo;t think of every feature that the library might offer or what bugs it might contain, these packages tend to evolve.</description></item><item><title>Python packaging - Growing Pains</title><link>https://bernat.tech/posts/growing-pain/</link><pubDate>Thu, 07 Feb 2019 13:41:03 +0000</pubDate><guid>https://bernat.tech/posts/growing-pain/</guid><description>In my previous two posts, I&amp;rsquo;ve gone over what package types python has, and how the package building works, especially with the introduction of the PEP-517/518. Although the changes were primarily to make things more robust, we did run into a few issues while implementing it and releasing it. This post will go over a few, hopefully serving as lessons learned for all of us and presenting some interesting problems to solve in the future.</description></item><item><title>Python packaging - Past, Present, Future</title><link>https://bernat.tech/posts/pep-517-518/</link><pubDate>Thu, 07 Feb 2019 13:40:59 +0000</pubDate><guid>https://bernat.tech/posts/pep-517-518/</guid><description>Have you ever wondered what happens exactly when you run pip install? This post will give you a detailed overview of the steps involved in the past, and how it all changes with the adoption of PEP-517 and PEP-518.
In my previous post I&amp;rsquo;ve described how it&amp;rsquo;s possible to install three types of content: source tree, source distribution, and wheels. Only the last two types are uploaded to PyPI, the central Python repository.</description></item><item><title>The state of Python Packaging</title><link>https://bernat.tech/posts/pep-517-and-python-packaging/</link><pubDate>Thu, 07 Feb 2019 13:40:54 +0000</pubDate><guid>https://bernat.tech/posts/pep-517-and-python-packaging/</guid><description>pip 19.0 has been released on 22nd January 2019. On the feature list, most notably, it now supports PEP-517, which by default is turned on when that the project has a pyproject.toml at the root folder. The PEP in question has been created in 2015 and accepted in 2017. Even though it took a while until pip implemented it, the release and the issues that followed confirmed that many people are not familiar with it.</description></item><item><title>The state of type hints in Python</title><link>https://bernat.tech/posts/the-state-of-type-hints-in-python/</link><pubDate>Wed, 30 May 2018 09:51:55 +0000</pubDate><guid>https://bernat.tech/posts/the-state-of-type-hints-in-python/</guid><description>One of the main selling points for Python is that it is dynamically-typed. There is no plan to change this. Nevertheless, in September 2014 Guido van Rossum (Python BDFL) created a python enhancement proposal (PEP-484) to add type hints to Python. It has been released for general usage a year later, in September 2015, as part of Python 3.5.0. Twenty-five years into its existence now there was a standard way to add type information to Python code.</description></item><item><title>About bernat.tech</title><link>https://bernat.tech/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernat.tech/about/</guid><description>Bernát Gábor (from 🇭🇺🇷🇴🇬🇧), living in Los Angeles 🇺🇸 Link to heading I work at Bloomberg US - Los Angeles on the data ingestion pipelines quality control segment. I am the primary maintainer (author) for the following Python open-source projects:
platformdirs &amp;ndash; filelock &amp;ndash; virtualenv &amp;ndash; tox &amp;ndash; pyproject-api &amp;ndash; sphinx-autodoc-typehints &amp;ndash; pipdeptree &amp;ndash; pytest-env &amp;ndash; pytest-print &amp;ndash; tox-gh &amp;ndash; sphinx-argparse-cli &amp;ndash; devpi-process &amp;ndash; pyproject-fmt &amp;ndash; tox-ini-fmt &amp;ndash; bump-deps-index &amp;ndash; pypi-changes &amp;ndash; For the following projects, while I do hold the write commit bit, I only help with maintainership when needed:</description></item><item><title>Presentations by Bernát Gábor</title><link>https://bernat.tech/presentations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://bernat.tech/presentations/</guid><description>I&amp;rsquo;m a regular speaker at conferences. Here you&amp;rsquo;ll find (some) of my recorded talks.
Type hinting (and mypy) - PyCon US 2019 - slides How we standardized editable installs PEP 660 vs PEP 662 - PyCon US 2022 - slides Python packaging demystified - tutorial - PyCon US 2021 - slides tox 4 - lightning talk - PyCon US 2021 - slides status quo of virtual environments - EuroPython 2019 - slides Virtualenv - A Deep Dive - PyCharm Webinar 2021 Standardize Testing in Python - EuroPython 2018 - slides Lessons from the Trenches: rewriting and re-releasing virtualenv - EuroPython 2020 - slides How to best package your library?</description></item></channel></rss>