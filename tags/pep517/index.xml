<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Pep517 on Tech articles by Bern치t G치bor</title><link>https://bernat.tech/tags/pep517/</link><description>Recent content in Pep517 on Tech articles by Bern치t G치bor</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 10 Feb 2025 11:32:39 -0800</lastBuildDate><atom:link href="https://bernat.tech/tags/pep517/index.xml" rel="self" type="application/rss+xml"/><item><title>Python packaging - Growing Pains</title><link>https://bernat.tech/posts/growing-pain/</link><pubDate>Thu, 07 Feb 2019 13:41:03 +0000</pubDate><guid>https://bernat.tech/posts/growing-pain/</guid><description>&lt;p&gt;In my previous two posts, I&amp;rsquo;ve gone over &lt;a href="https://bernat.tech/posts/pep-517-and-python-packaging/" &gt;what package types python has&lt;/a&gt;,
and &lt;a href="https://bernat.tech/posts/pep-517-518/" &gt;how the package building works&lt;/a&gt;, especially with the introduction of the PEP-517/518.
Although the changes were primarily to make things more robust, we did run into a few issues while implementing it and
releasing it. This post will go over a few, hopefully serving as lessons learned for all of us and presenting some
interesting problems to solve in the future.&lt;/p&gt;</description></item><item><title>Python packaging - Past, Present, Future</title><link>https://bernat.tech/posts/pep-517-518/</link><pubDate>Thu, 07 Feb 2019 13:40:59 +0000</pubDate><guid>https://bernat.tech/posts/pep-517-518/</guid><description>&lt;p&gt;Have you ever wondered what happens exactly when you run pip install? This post will give you a detailed overview of the
steps involved in the past, and how it all changes with the adoption of PEP-517 and PEP-518.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://bernat.tech/posts/pep-517-and-python-packaging/" &gt;In my previous post&lt;/a&gt; I&amp;rsquo;ve described how it&amp;rsquo;s possible to install three
types of content: source tree, source distribution, and wheels. Only the last two types are uploaded to PyPI, the
central Python repository. However, one could get its hands on a source tree (by feeding, for example, a git protocol
for pip). The advantage of wheels over the others is that it does not require any build operation to happen on the user
machine; it&amp;rsquo;s just downloading and extract.&lt;/p&gt;</description></item><item><title>The state of Python Packaging</title><link>https://bernat.tech/posts/pep-517-and-python-packaging/</link><pubDate>Thu, 07 Feb 2019 13:40:54 +0000</pubDate><guid>https://bernat.tech/posts/pep-517-and-python-packaging/</guid><description>&lt;p&gt;pip 19.0 has been released on 22nd January 2019. On the feature list, most notably, it now supports PEP-517, which by
default is turned &lt;strong&gt;on&lt;/strong&gt; when that the project has a &lt;code&gt;pyproject.toml&lt;/code&gt; at the root folder. The PEP in question has been
created in 2015 and accepted in 2017. Even though it took a while until pip implemented it, the release and the issues
that followed confirmed that many people are not familiar with it. Read on if you want to get a picture of how the
Python packaging ecosystem evolved today and where we hope to see it down the line. We expect that even though the
introduction of the aforementioned python enhancement proposal may cause some discomfort, we will benefit from it in the
long term.&lt;/p&gt;</description></item></channel></rss>