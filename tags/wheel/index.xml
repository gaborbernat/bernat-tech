<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Wheel on Tech articles by Bern치t G치bor</title><link>https://bernat.tech/tags/wheel/</link><description>Recent content in Wheel on Tech articles by Bern치t G치bor</description><generator>Hugo</generator><language>en</language><lastBuildDate>Sat, 07 Sep 2024 10:37:56 -0700</lastBuildDate><atom:link href="https://bernat.tech/tags/wheel/index.xml" rel="self" type="application/rss+xml"/><item><title>The state of Python Packaging</title><link>https://bernat.tech/posts/pep-517-and-python-packaging/</link><pubDate>Thu, 07 Feb 2019 13:40:54 +0000</pubDate><guid>https://bernat.tech/posts/pep-517-and-python-packaging/</guid><description>&lt;p>pip 19.0 has been released on 22nd January 2019. On the feature list, most notably, it now supports PEP-517, which by
default is turned &lt;strong>on&lt;/strong> when that the project has a &lt;code>pyproject.toml&lt;/code> at the root folder. The PEP in question has been
created in 2015 and accepted in 2017. Even though it took a while until pip implemented it, the release and the issues
that followed confirmed that many people are not familiar with it. Read on if you want to get a picture of how the
Python packaging ecosystem evolved today and where we hope to see it down the line. We expect that even though the
introduction of the aforementioned python enhancement proposal may cause some discomfort, we will benefit from it in the
long term.&lt;/p></description></item></channel></rss>